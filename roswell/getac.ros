#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -m getac -L sbcl-bin -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(#:getac) :silent t))

(defpackage #:getac/roswell/getac.ros
  (:use #:cl))
(in-package #:getac/roswell/getac.ros)

(defun print-usage ()
  (format *error-output*
          "~&Usage: getac [options] [file]

OPTIONS:
    -t, --test [file]
        Specify a file to read test cases. (Default: '*.in')
    -f, --filetype [type]
        File type to test. The default will be detected by the file extension.
    --disable-colors
        Turn off colors. (Default: ~:[true~;false~])
    --h, --help
        Show help.~%"
        getac:*enable-colors*))

(defvar *test-file* nil)
(defvar *filetype* nil)

(defmacro case-equal (keyform &body cases)
  (let ((g-keyform (gensym "KEYFORM")))
    `(let ((,g-keyform ,keyform))
       (cond
         ,@(loop for (case . body) in cases
                 if (eq case 'otherwise)
                   collect `(t ,@body)
                 else
                   collect `((find ,g-keyform ',(if (listp case)
                                                    case
                                                    (list case))
                                   :test #'equal)
                             ,@body))))))

(defun parse-argv (argv)
  (loop for option = (pop argv)
        while option
        do (case-equal option
             (("-t" "--test")
              (setf *test-file* (pop argv)))
             (("-f" "--filetype")
              (setf *filetype* (pop argv)))
             (("--disable-colors")
              (setf getac:*enable-colors* nil))
             (("-h" "--help")
              (print-usage)
              (uiop:quit -1))
             (otherwise
               (if (and (length option)
                        (char= (aref option 0) #\-))
                   (progn
                     (format *error-output* "~&Invalid option: ~A~%" option)
                     (uiop:quit -1))
                   (return (cons option argv)))))))

(defun main (&rest argv)
  (let* ((argv (parse-argv argv))
         (filename (first argv)))
    (unless filename
      (print-usage)
      (uiop:quit -1))
    (when (rest argv)
      (format *error-output* "~&Extra arguments: ~{~A~^ ~}~%" (rest argv))
      (print-usage)
      (uiop:quit -1))

    (or (handler-case (getac:run filename :test *test-file* :filetype *filetype*)
          (simple-error (e)
            (format *error-output* "~&~A~%" e)
            nil)
          (error (e)
            (format *error-output* "~&~A: ~A~%" (type-of e) e)
            nil))
        (uiop:quit -1))))
;;; vim: set ft=lisp lisp:
